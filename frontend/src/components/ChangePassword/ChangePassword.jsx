import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { changePassword } from '../../Redux/authSlice'; // –≠—Ç–æ –º—ã –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
import { useTranslations } from '../../hooks/useTranslations';
import styles from './ChangePassword.module.css';

const ChangePassword = () => {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmNewPassword, setConfirmNewPassword] = useState('');
  const [message, setMessage] = useState(null);
  const [showCurrent, setShowCurrent] = useState(false);
  const [showNew, setShowNew] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { t } = useTranslations();

  const { loading, error } = useSelector(state => state.auth);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage(null);

    if (newPassword !== confirmNewPassword) {
      setMessage(t('passwords_dont_match'));
      return;
    }

    if (newPassword.length < 6) {
      setMessage(t('password_too_short'));
      return;
    }

    try {
      await dispatch(changePassword({ currentPassword, newPassword })).unwrap();
      setMessage(t('password_changed'));
      setCurrentPassword('');
      setNewPassword('');
      setConfirmNewPassword('');
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      setTimeout(() => {
        navigate(-1); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–≤ –ø—Ä–æ—Ñ–∏–ª—å)
      }, 2000);
    } catch (err) {
      setMessage(err.message || t('cannot_change_password', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'));
    }
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>{t('change_password')}</h2>
      <form onSubmit={handleSubmit} className={styles.form}>
        <div className={styles.formGroup}>
          <label htmlFor="currentPassword" className={styles.label}>{t('current_password', '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å')}</label>
          <div style={{position: 'relative'}}>
            <input
              type={showCurrent ? "text" : "password"}
              id="currentPassword"
              className={styles.input}
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              required
              disabled={loading}
            />
            <button
              type="button"
              className={styles.showPasswordButton}
              style={{position: 'absolute', right: 10, top: '50%', transform: 'translateY(-50%)'}}
              onClick={() => setShowCurrent(v => !v)}
              tabIndex={-1}
              aria-label={showCurrent ? t('hide_password', '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å') : t('show_password', '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å')}
            >
              {showCurrent ? "üôà" : "üëÅÔ∏è"}
            </button>
          </div>
        </div>
        <div className={styles.formGroup}>
          <label htmlFor="newPassword" className={styles.label}>{t('new_password', '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')}</label>
          <div style={{position: 'relative'}}>
            <input
              type={showNew ? "text" : "password"}
              id="newPassword"
              className={styles.input}
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              required
              disabled={loading}
            />
            <button
              type="button"
              className={styles.showPasswordButton}
              style={{position: 'absolute', right: 10, top: '50%', transform: 'translateY(-50%)'}}
              onClick={() => setShowNew(v => !v)}
              tabIndex={-1}
              aria-label={showNew ? t('hide_password', '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å') : t('show_password', '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å')}
            >
              {showNew ? "üôà" : "üëÅÔ∏è"}
            </button>
          </div>
        </div>
        <div className={styles.formGroup}>
          <label htmlFor="confirmNewPassword" className={styles.label}>{t('confirm_new_password', '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')}</label>
          <div style={{position: 'relative'}}>
            <input
              type={showConfirm ? "text" : "password"}
              id="confirmNewPassword"
              className={styles.input}
              value={confirmNewPassword}
              onChange={(e) => setConfirmNewPassword(e.target.value)}
              required
              disabled={loading}
            />
            <button
              type="button"
              className={styles.showPasswordButton}
              style={{position: 'absolute', right: 10, top: '50%', transform: 'translateY(-50%)'}}
              onClick={() => setShowConfirm(v => !v)}
              tabIndex={-1}
              aria-label={showConfirm ? t('hide_password', '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å') : t('show_password', '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å')}
            >
              {showConfirm ? "üôà" : "üëÅÔ∏è"}
            </button>
          </div>
        </div>
        <button type="submit" className={styles.button} disabled={loading}>
          {loading ? t('changing_password', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è') : t('change_password')}
        </button>
        {message && <p className={styles.message}>{message}</p>}
        {error && <p className={styles.errorMessage}>{error}</p>}
      </form>
    </div>
  );
};

export default ChangePassword; 